name: Build, Scan and Push Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  build-scan-push:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python and run unit tests
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run unit tests
        run: pytest -v

      # 3. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Build Docker image (local)
      - name: Build Docker image
        run: docker build -t myapp:latest .

      # 5. Trivy — print MEDIUM+ vulnerabilities to console (do NOT fail)
      - name: Trivy scan (console MEDIUM+)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: myapp:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          scanners: 'vuln'           # only scan for vulnerabilities, not secrets

      # 6. Trivy — enforce policy (fail only if CRITICAL vulnerabilities found)
      - name: Trivy policy (fail on CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: myapp:latest
          format: table
          exit-code: 1               # fail the build if CRITICAL vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          scanners: 'vuln'           # vulnerability scan only

      # 7. Log in to Docker Hub (only after scans passed)
      - name: Log in to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 8. Tag and Push Docker image
      - name: Push Docker image
        if: success()
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/myapp

          # push latest
          docker tag myapp:latest $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

          # also push a commit SHA tag (optional but recommended)
          docker tag myapp:latest $IMAGE_NAME:sha-${GITHUB_SHA}
          docker push $IMAGE_NAME:sha-${GITHUB_SHA}

          # push version tag on releases
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            docker tag myapp:latest $IMAGE_NAME:${GITHUB_REF_NAME}
            docker push $IMAGE_NAME:${GITHUB_REF_NAME}
          fi
